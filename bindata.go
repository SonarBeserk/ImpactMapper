// Code generated by go-bindata.
// sources:
// files/dot.tmpl
// files/map.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\xdb\x30\x0c\x86\xcf\xf2\x53\x10\x46\x8f\x69\x8a\x5c\x67\x78\xc0\x80\x0c\x45\x0f\x6b\x2f\xbd\x05\xc1\x40\x47\x8c\x63\x44\x91\x3c\xda\xee\x96\x11\x7a\xf7\xc1\x92\x92\x26\xdb\xd2\x1c\x72\x33\x81\x9f\xf4\xf7\x81\xe2\xc3\x03\x3c\x92\x25\xc6\x9e\x34\x54\x7b\x68\x76\x2d\xae\x7a\xd8\x61\xdb\x12\x4f\x60\xfe\x02\xcf\x2f\xaf\xf0\x75\xfe\xf4\x9a\xe9\xa6\x66\x6c\x37\x20\x32\x7d\xc6\x1d\x79\x0f\x92\x29\x91\x66\x0d\xf4\x03\xa6\xdf\x9c\x26\xc8\x37\x8e\x9b\xdf\xce\xf6\x68\x72\xef\x2d\xfd\x64\xb4\xdb\xb2\xe7\x81\x0a\x11\xb2\xda\xfb\x4c\xd9\x31\xb8\xe8\xfa\xbd\xa1\x32\x5f\x37\xc6\x90\x9e\xb0\x1b\xac\x26\x9d\x4f\xa0\xdb\x60\x4b\x65\xe5\x7e\x2d\x8b\x2c\x53\xdd\x50\xc5\x7f\xae\xcc\xd0\xf5\xc4\xdf\x6b\x87\x66\xfc\x6d\x98\xb2\x58\x39\xe3\xb8\xd4\xc8\xdb\xda\x19\x4d\x96\x9d\x5e\x66\x4a\x89\xdc\x03\xa3\xad\x09\xee\xb6\xb4\x9f\xc0\xdd\x1b\x9a\x81\xe0\x53\x09\xd3\x47\x87\xa6\x1b\x29\x94\xc0\xf8\x2d\x32\x46\xbc\x5f\x18\xac\xc8\x94\xb9\x48\x0c\x27\xc3\x7c\x09\x3e\x0d\x4c\xf4\x2a\x04\xa1\x84\x7c\x6c\xcf\x8b\x4c\xa9\x40\x01\x25\x9c\x71\x64\xca\xff\x8f\x1f\x57\xbd\xe3\xa3\x00\x24\x83\xb5\x63\xea\xfa\x9a\x89\xec\x15\xfe\x2f\x63\x7f\x14\x48\xf8\x11\x77\x2c\xbc\x87\xfb\xcf\x20\x10\x32\x37\x88\x85\xfe\x33\xb3\x13\xbe\x0b\x5e\xe9\xd9\xfc\xbd\x19\xa7\x6b\xe2\xca\x0c\x74\x45\xeb\x29\xb4\x47\xaf\x03\x7e\xc4\x0d\xd5\xc1\x2c\xc6\x6e\x50\x8b\x03\xce\xb7\x76\x64\xbc\xa0\xa6\xc9\x34\x6f\xc4\x58\x19\xfa\xc7\x8f\xa8\x6d\x1b\xbb\xbd\x62\x37\x7f\x9f\x10\x15\x8f\x1e\x91\x3b\x96\x07\xc9\x93\xf4\x0d\xa6\x27\x53\xce\x75\x13\x72\x94\xfd\xe8\x7a\x05\xc2\xf1\x76\xb8\xa3\x22\xdc\xca\xac\x88\x4f\x6b\x56\xa4\x45\xcc\x8a\x53\xd8\x59\x01\xfe\x1d\xc5\xff\x09\x00\x00\xff\xff\x12\x2f\xf0\x4c\x59\x04\x00\x00")

func filesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_filesDotTmpl,
		"files/dot.tmpl",
	)
}

func filesDotTmpl() (*asset, error) {
	bytes, err := filesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/dot.tmpl", size: 1113, mode: os.FileMode(438), modTime: time.Unix(1539407929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesMapToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x8e\xda\x40\x0c\x86\xef\x79\x0a\x2b\xf7\x16\x01\xed\x91\x43\xa0\xa2\x97\x22\x90\x68\x7b\x89\x38\x98\xc4\x24\xa3\x9d\x8c\xb3\x1e\x07\x04\x4f\xbf\x22\xd9\x44\x64\x76\x85\xf6\xf8\x8f\xe6\xfb\xec\x5f\x76\x58\x11\x2c\x20\xfe\x4b\x5e\xe3\xa8\xe2\xbc\x4d\x25\x8b\xb9\xb1\x53\xb4\x31\x4c\x26\xb0\x15\x38\x93\xa8\xc9\xd0\x46\x51\x5a\x30\x5a\x7f\x88\x22\x00\x80\x2e\x7c\x9f\x1e\xda\xd4\xcb\x7e\x0b\x5f\x60\xc3\x47\x63\x09\x92\xbc\x45\xbd\x71\x45\x1c\x45\x29\x66\xca\x32\xd0\x5d\x0a\xf1\x7d\x53\x93\x7c\x5b\xa3\xf3\x70\x31\x5a\xf6\xa6\x5f\x74\x36\x19\xf9\xb8\xfd\x7b\x9f\x0b\x0b\x98\x8e\x45\xb3\xb1\x68\xc5\x2e\x23\x51\xd8\x4a\x81\xce\xdc\x48\x9e\xc2\xf3\x31\x9c\xdc\xb7\x56\x48\x0a\x72\xea\x01\x5d\x0e\x3b\xe1\x8a\xef\x5f\x43\x4b\x6a\xaa\x1a\x33\x1d\x6a\xbd\xc7\xb0\xd7\x8a\x2b\x82\x25\x66\x2f\xb0\x61\x21\x58\x0b\xbd\x36\xe4\xd4\x5e\x3b\x5f\xbb\xc6\xc3\x5a\xbd\x25\x28\xb5\x57\xbc\xc2\x1f\x76\x05\xc9\x73\x2e\xe8\xf3\xdf\xd0\xa5\x1b\x9c\xe4\xfe\x03\x99\xe6\x64\xcd\x99\x04\x8f\x96\x86\x1e\x8f\x6f\x61\x99\x5d\xe3\x4b\xf8\x57\xe7\xa8\xfd\x49\xba\xb9\x0f\x8b\x8c\xf0\xb0\x45\x4d\x99\x41\x0b\xdb\xd3\x69\x38\xcb\x73\x41\x50\x67\xcd\xd2\x54\x21\x38\xfb\x0c\xfc\x11\x5c\xa1\x44\xfd\x12\xf7\x73\xcc\x2d\x49\x95\x04\x76\x58\x18\x87\x6a\xd8\x05\x8e\xf9\x5b\x00\x00\x00\xff\xff\xcd\x17\xbe\x67\x4b\x03\x00\x00")

func filesMapTomlBytes() ([]byte, error) {
	return bindataRead(
		_filesMapToml,
		"files/map.toml",
	)
}

func filesMapToml() (*asset, error) {
	bytes, err := filesMapTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/map.toml", size: 843, mode: os.FileMode(438), modTime: time.Unix(1539407567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/dot.tmpl": filesDotTmpl,
	"files/map.toml": filesMapToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"dot.tmpl": &bintree{filesDotTmpl, map[string]*bintree{}},
		"map.toml": &bintree{filesMapToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

