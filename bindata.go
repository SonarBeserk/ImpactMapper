// Code generated by go-bindata.
// sources:
// files/dot.tmpl
// files/map.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\xdb\x30\x0c\x86\xcf\xf2\x53\x10\x46\x8f\x69\x8a\x5c\x67\x78\xc0\x80\x0c\x45\x0f\x6b\x2f\xbd\x05\xc1\x40\x47\x8c\x63\x44\x91\x3c\xda\xee\x96\x11\x7a\xf7\xc1\x92\x92\xc5\xdb\xba\x1c\x72\x33\x81\x9f\xf4\xf7\x81\xe2\xc3\x03\x3c\x92\x25\xc6\x9e\x34\x54\x47\x68\x0e\x2d\x6e\x7a\x38\x60\xdb\x12\xcf\x60\xf9\x02\xcf\x2f\xaf\xf0\x79\xf9\xf4\x9a\xe9\xa6\x66\x6c\x77\x20\x32\x7f\xc6\x03\x79\x0f\x92\x29\x91\x66\x0b\xf4\x0d\xe6\x5f\x9c\x26\xc8\x77\x8e\x9b\x9f\xce\xf6\x68\x72\xef\x2d\x7d\x67\xb4\xfb\xb2\xe7\x81\x0a\x11\xb2\xda\xfb\x4c\xd9\x31\xb8\xea\xfa\xa3\xa1\x32\xdf\x36\xc6\x90\x9e\xb1\x1b\xac\x26\x9d\xcf\xa0\xdb\x61\x4b\x65\xe5\x7e\xac\x8b\x2c\x53\xdd\x50\xc5\x7f\x6e\xcc\xd0\xf5\xc4\x5f\x6b\x87\x66\xfc\x6d\x98\xb2\xda\x38\xe3\xb8\xd4\xc8\xfb\xda\x19\x4d\x96\x9d\x5e\x67\x4a\x89\xdc\x03\xa3\xad\x09\xee\xf6\x74\x9c\xc1\xdd\x1b\x9a\x81\xe0\x43\x09\xf3\x47\x87\xa6\x1b\x29\x94\xc0\xf8\x2d\x32\x46\xbc\x5f\x19\xac\xc8\x94\xb9\x48\x0c\x27\xc3\x7c\x0d\x3e\x0d\x4c\xf4\x2a\x04\xa1\x84\x7c\x6c\xcf\x8b\x4c\xa9\x40\x01\x25\x4c\x38\x32\xe5\xff\xc5\x8f\x9b\xde\xf1\x59\x00\x92\xc1\xd6\x31\x75\x7d\xcd\x44\xf6\x0a\xff\xa7\xb1\x3f\x0a\x24\xfc\x88\x3b\x16\xde\xc3\xfd\x47\x10\x08\x99\x1b\xc4\x42\xff\xc4\xec\x82\xef\x1d\xaf\xf4\x6c\xfe\xdc\x8c\xd3\x35\x71\x65\x06\xba\xa2\xf5\x14\xda\xa3\xd7\x09\x3f\xe2\x86\xea\x64\x16\x63\x37\xa8\xc5\x01\xd3\xad\x9d\x19\xdf\x51\xd3\x64\x9a\x37\x62\xac\x0c\xfd\xe5\x47\xd4\xb6\x8d\xdd\x5f\xb1\x5b\xfe\x9e\x10\x15\xcf\x1e\x91\x3b\x96\x27\xc9\x8b\xf4\x0d\xa6\x17\x53\xa6\xba\x09\x39\xca\xfe\xef\x7a\x05\xc2\xf1\x76\x78\xa0\x22\xdc\xca\xa2\x88\x4f\x6b\x51\xa4\x45\x2c\x8a\x4b\xd8\x45\x01\xfe\x74\xe4\xfe\x57\x00\x00\x00\xff\xff\x6b\x72\x0d\x1d\x57\x04\x00\x00")

func filesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_filesDotTmpl,
		"files/dot.tmpl",
	)
}

func filesDotTmpl() (*asset, error) {
	bytes, err := filesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/dot.tmpl", size: 1111, mode: os.FileMode(438), modTime: time.Unix(1539407964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesMapToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x6e\xe2\x40\x0c\x86\xef\x79\x0a\x2b\x7b\xde\x95\x80\xdd\x23\x87\xc0\x8a\xbd\x2c\x02\x89\xb6\x97\x88\x83\x49\x4c\x32\xea\x64\x9c\x7a\x1c\x10\x3c\x7d\x45\xd2\x44\x64\x5a\xa1\x1e\xff\xd1\x7c\x9f\xfd\xcb\x0e\x2b\x82\x39\xc4\x4f\xe4\x35\x8e\x2a\xce\xdb\x54\xb2\x98\x2b\x3b\x45\x1b\xc3\x0f\xd8\x08\x9c\x48\xd4\x64\x68\xa3\x28\x2d\x18\xad\xdf\x47\x11\x00\x40\x17\x7e\x4d\xf6\x6d\xea\x5d\xff\x84\xcf\xb0\xe6\x83\xb1\x04\x49\xde\xa2\xde\xb8\x22\x8e\xa2\x14\x33\x65\x19\xe8\x2e\x85\xf8\xae\xa9\x49\x7e\xae\xd0\x79\x38\x1b\x2d\x7b\xd3\x5f\x3a\x99\x8c\x7c\xdc\xfe\xbd\xcd\x85\x39\x4c\xc6\xa2\xe9\x58\xb4\x64\x97\x91\x28\x6c\xa4\x40\x67\xae\x24\x0f\xe1\xd9\x18\x4e\x6e\x5b\x2b\x24\x05\x39\xf5\x80\x2e\x87\xad\x70\xc5\xb7\xaf\xa1\x25\x35\x55\x8d\x99\x0e\xb5\x3e\x62\xd8\x6b\xc9\x15\xc1\x02\xb3\x57\x58\xb3\x10\xac\x84\xde\x1a\x72\x6a\x2f\x9d\xaf\x5d\xe3\x6e\xad\xde\x12\x94\xda\x29\x5e\xe0\x3f\xbb\x82\xe4\x31\x17\xf4\x79\x31\x74\xee\x06\x27\xb9\xff\x44\xa6\x39\x59\x73\x22\xc1\x83\xa5\xa1\xc7\xfd\x5b\x58\x66\xdb\xf8\x12\x9e\xeb\x1c\xb5\x3f\x49\x37\xf7\x6e\x91\x11\x1e\xb6\xa8\x29\x33\x68\x61\x73\x3c\x0e\x67\x79\x2c\x08\xea\xac\x58\x9a\x2a\x04\xa7\x5f\x81\xbf\x83\x2b\x94\xa8\xdf\xe2\xfe\x8c\xb9\x05\xa9\x92\xc0\x16\x0b\xe3\x50\x0d\xbb\xc0\x31\x7b\x0f\x00\x00\xff\xff\xa0\xb3\x08\xff\x4a\x03\x00\x00")

func filesMapTomlBytes() ([]byte, error) {
	return bindataRead(
		_filesMapToml,
		"files/map.toml",
	)
}

func filesMapToml() (*asset, error) {
	bytes, err := filesMapTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/map.toml", size: 842, mode: os.FileMode(438), modTime: time.Unix(1539622820, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/dot.tmpl": filesDotTmpl,
	"files/map.toml": filesMapToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"dot.tmpl": &bintree{filesDotTmpl, map[string]*bintree{}},
		"map.toml": &bintree{filesMapToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

